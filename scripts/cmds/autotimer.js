(cmd install autotime.js module.exports = {
  config: {
    name: "dhakatime",
    version: "4.0",
    role: 0,
    author: "ЁЭЧжЁЭЧ╡ЁЭЧФЁЭЧ╗",
    description: "рзирзк/рзн ржврж╛ржХрж╛ рж╕ржорзЯ ржУ ржирж╛ржорж╛ржЬрзЗрж░ рж░рж┐ржорж╛ржЗржирзНржбрж╛рж░ (ржЪрж╛рж▓рзБ/ржмржирзНржз ржХрж░рж╛ ржпрж╛рзЯ)",
    category: "ЁЭЧвЁЭЧкЁЭЧбЁЭЧШЁЭЧе",
    countDown: 5,
    guide: "{p}dhakatime [on|off|status] - ржЯржЧрж▓ ржХрж░рзБржи"
  },

  onStart: async function ({ message, event, args, api }) {
    const action = args[0]?.toLowerCase();
    const { threadID } = event;

    // Initialize with persistent storage
    if (!global.dhakaTime) {
      global.dhakaTime = {
        activeThreads: [],
        disabledThreads: [],
        intervals: {},
        apiInstance: api
      };
    }

    const timeData = global.dhakaTime;

    switch (action) {
      case "on":
        if (timeData.activeThreads.includes(threadID)) {
          return message.reply("ЁЯФ┤ ржЗрждрж┐ржоржзрзНржпрзЗржЗ ржПржЗ ржЪрзНржпрж╛ржЯрзЗ ржЪрж╛рж▓рзБ ржЖржЫрзЗ!");
        }
        
        // Remove from disabled list if present
        timeData.disabledThreads = timeData.disabledThreads.filter(id => id !== threadID);
        
        timeData.activeThreads.push(threadID);
        startTimeUpdates(threadID, api);
        message.reply("ЁЯЯв рзирзк/рзн ржврж╛ржХрж╛ рж╕ржорзЯ рж░рж┐ржорж╛ржЗржирзНржбрж╛рж░ ржЪрж╛рж▓рзБ рж╣рж▓рзЛ!");
        break;

      case "off":
        if (!timeData.activeThreads.includes(threadID)) {
          return message.reply("ЁЯФ┤ ржПржЗ ржЪрзНржпрж╛ржЯрзЗ ржЪрж╛рж▓рзБ ржЫрж┐рж▓ ржирж╛!");
        }
        
        timeData.activeThreads = timeData.activeThreads.filter(id => id !== threadID);
        timeData.disabledThreads.push(threadID);
        clearInterval(timeData.intervals[threadID]);
        delete timeData.intervals[threadID];
        message.reply("ЁЯФ┤ рж╕ржорзЯ рж░рж┐ржорж╛ржЗржирзНржбрж╛рж░ ржмржирзНржз ржХрж░рж╛ рж╣рж▓рзЛ!");
        break;

      case "status":
        const status = timeData.activeThreads.includes(threadID) 
          ? "ЁЯЯв ржЪрж╛рж▓рзБ" 
          : "ЁЯФ┤ ржмржирзНржз";
        message.reply(`ЁЯУК ржмрж░рзНрждржорж╛ржи ржЕржмрж╕рзНржерж╛: ${status}\n\n"${getRandomQuote()}"`);
        break;

      default:
        message.reply("тЪЩя╕П ржмрзНржпржмрж╣рж╛рж░:\n" +
          "тАв dhakatime on - ржЪрж╛рж▓рзБ ржХрж░рзБржи\n" +
          "тАв dhakatime off - ржмржирзНржз ржХрж░рзБржи\n" +
          "тАв dhakatime status - ржЕржмрж╕рзНржерж╛ ржжрзЗржЦрзБржи");
    }
  },

  onLoad: function ({ api }) {
    // Initialize or restore state
    if (!global.dhakaTime) {
      global.dhakaTime = {
        activeThreads: [],
        disabledThreads: [],
        intervals: {},
        apiInstance: api
      };
    } else {
      // Restore API instance after restart
      global.dhakaTime.apiInstance = api;
      
      // Restart updates for active threads
      global.dhakaTime.activeThreads.forEach(threadID => {
        if (!global.dhakaTime.disabledThreads.includes(threadID)) {
          startTimeUpdates(threadID, api);
        }
      });
    }
  }
};

// ========================
// CORE FUNCTIONALITY
// ========================

function startTimeUpdates(threadID, api) {
  // Clear existing interval
  if (global.dhakaTime.intervals[threadID]) {
    clearInterval(global.dhakaTime.intervals[threadID]);
  }

  // Send immediately
  sendTimeUpdate(threadID, api);

  // Set hourly interval
  global.dhakaTime.intervals[threadID] = setInterval(() => {
    sendTimeUpdate(threadID, api);
  }, 3600000); // 1 hour
}

async function sendTimeUpdate(threadID, api) {
  try {
    const now = new Date(new Date().toLocaleString("en-US", { timeZone: "Asia/Dhaka" }));
    const hours = now.getHours();
    const minutes = now.getMinutes();
    const currentTotal = hours * 60 + minutes;

    // Skip if thread is disabled
    if (global.dhakaTime.disabledThreads.includes(threadID)) return;

    // Get prayer info
    const { nextPrayer } = await getPrayerInfo(currentTotal);
    const banglaTime = formatBanglaTime(hours, minutes);

    // Compose message
    let message = `ЁЯХМ ржврж╛ржХрж╛ рж╕ржорзЯ: ${banglaTime}\n\n`;

    // Add prayer reminder if within 30 minutes
    if (nextPrayer.remaining <= 30) {
      message += `тП│ ржкрж░ржмрж░рзНрждрзА ржирж╛ржорж╛ржЬ: ${nextPrayer.name} (${nextPrayer.time})\n`;
      message += `ЁЯУ┐ ${getPrayerReminder(nextPrayer.name)}\n\n`;
    }

    // Add time-specific message
    message += `${getTimeMessage(hours)}\n\n`;
    message += `"${getRandomQuote()}"\n`;
    message += `тЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦмтЦм`;

    // Send message
    await api.sendMessage(message, threadID);
  } catch (err) {
    console.error("ржЖржкржбрзЗржЯ ржкрж╛ржарж╛рждрзЗ ржмрзНржпрж░рзНрже:", err);
  }
}

// ========================
// HELPER FUNCTIONS
// ========================

async function getPrayerInfo(currentTotal) {
  // Sample prayer times (replace with API)
  const prayers = [
    { name: "ржлржЬрж░", time: "5:30" },
    { name: "ржпрзЛрж╣рж░", time: "12:15" },
    { name: "ржЖрж╕рж░", time: "15:45" },
    { name: "ржорж╛ржЧрж░рж┐ржм", time: "18:15" },
    { name: "ржЗрж╢рж╛", time: "19:45" }
  ];

  // Convert to minutes and find next prayer
  let nextPrayer = null;
  for (const prayer of prayers) {
    const [h, m] = prayer.time.split(':').map(Number);
    const prayerTotal = h * 60 + m;
    
    if (prayerTotal > currentTotal) {
      nextPrayer = {
        name: prayer.name,
        time: format12Hour(h, m),
        remaining: prayerTotal - currentTotal
      };
      break;
    }
  }

  // If no prayer left today, use tomorrow's Fajr
  return { 
    nextPrayer: nextPrayer || {
      name: "ржлржЬрж░",
      time: "5:30 AM",
      remaining: (24*60 - currentTotal) + (5*60 + 30)
    }
  };
}

function formatBanglaTime(hours, minutes) {
  const banglaNumbers = ["рззрзи", "рзз", "рзи", "рзй", "рзк", "рзл", "рзм", "рзн", "рзо", "рзп", "рззрзж", "рззрзз"];
  const banglaHour = hours % 12 || 12;
  const period = hours >= 12 ? "ржЕржкрж░рж╛рж╣рзНржг" : "ржкрзВрж░рзНржмрж╛рж╣рзНржг";
  return `${banglaNumbers[banglaHour]}ржЯрж╛ ${minutes.toString().padStart(2, '0')}ржорж┐ржирж┐ржЯ ${period}`;
}

function format12Hour(hours, minutes) {
  const period = hours >= 12 ? "PM" : "AM";
  const hour12 = hours % 12 || 12;
  return `${hour12}:${minutes.toString().padStart(2, '0')} ${period}`;
}

function getPrayerReminder(prayerName) {
  const reminders = {
    "ржлржЬрж░": "ржлржЬрж░рзЗрж░ ржЖржЬрж╛ржирзЗрж░ ржкрзНрж░рж╕рзНрждрзБрждрж┐ ржирж┐ржи, рждрж╛рж╣рж╛ржЬрзНржЬрзБржж ржкрзЬрж╛рж░ рж╢рзЗрж╖ рж╕рзБржпрзЛржЧ",
    "ржпрзЛрж╣рж░": "ржпрзЛрж╣рж░рзЗрж░ ржирж╛ржорж╛ржЬ ржкрзЬрзБржи, ржжрзБржкрзБрж░рзЗрж░ ржЦрж╛ржмрж╛рж░рзЗрж░ ржЖржЧрзЗ",
    "ржЖрж╕рж░": "ржЖрж╕рж░рзЗрж░ ржирж╛ржорж╛ржЬ ржкрзЬрзБржи, ржжрж┐ржирзЗрж░ рж╢рзЗрж╖ ржкрзНрж░рж╣рж░рзЗ",
    "ржорж╛ржЧрж░рж┐ржм": "ржорж╛ржЧрж░рж┐ржмрзЗрж░ ржирж╛ржорж╛ржЬ ржкрзЬрзБржи, рж╕рзВрж░рзНржпрж╛рж╕рзНрждрзЗрж░ ржкрж░ржкрж░ржЗ",
    "ржЗрж╢рж╛": "ржЗрж╢рж╛рж░ ржирж╛ржорж╛ржЬ ржкрзЬрзЗ рж░рж╛рждрзНрж░рж┐ ржпрж╛ржкржи ржХрж░рзБржи"
  };
  return reminders[prayerName] || "ржирж╛ржорж╛ржЬрзЗрж░ рж╕ржорзЯ рж╣рзЯрзЗржЫрзЗ";
}

function getTimeMessage(hours) {
  const messages = {
    0: "ЁЯМГ ржоржзрзНржпрж░рж╛ржд: рждрж╛рж╣рж╛ржЬрзНржЬрзБржж ржкрзЬрж╛рж░ ржЙрждрзНрждржо рж╕ржорзЯ",
    1: "ЁЯМЬ рж░рж╛ржд рззржЯрж╛: ржЖрж▓рзНрж▓рж╛рж╣рж░ ржЬрж┐ржХрж┐рж░ ржХрж░рзБржи",
    2: "ЁЯМа рж░рж╛ржд рзиржЯрж╛: ржХрзБрж░ржЖржи рждрзЗрж▓рж╛ржУрзЯрж╛ржд ржХрж░рзБржи",
    3: "ЁЯММ рж░рж╛ржд рзйржЯрж╛: ржлржЬрж░рзЗрж░ ржкрзНрж░рж╕рзНрждрзБрждрж┐ ржирж┐ржи",
    4: "ЁЯМД рж░рж╛ржд рзкржЯрж╛: рж╢рзЗрж╖ рж░рж╛рждрзЗрж░ ржжрзЛрзЯрж╛ ржХржмрзБрж▓рзЗрж░ рж╕ржорзЯ",
    5: "ЁЯМЕ ржнрзЛрж░ рзлржЯрж╛: ржлржЬрж░рзЗрж░ ржЖржЬрж╛ржи рж╣рж▓рзЛ",
    6: "ЁЯМЮ рж╕ржХрж╛рж▓ рзмржЯрж╛: ржЗрж╢рж░рж╛ржХрзЗрж░ ржирж╛ржорж╛ржЬ ржкрзЬрзБржи",
    7: "тШАя╕П рж╕ржХрж╛рж▓ рзнржЯрж╛: ржирж╛рж╕рзНрждрж╛ рж╕рзЗрж░рзЗ ржжрж┐ржи рж╢рзБрж░рзБ ржХрж░рзБржи",
    8: "тП░ рж╕ржХрж╛рж▓ рзоржЯрж╛: ржХрж░рзНржоржмрзНржпрж╕рзНржд ржжрж┐ржирзЗрж░ рж╢рзБрж░рзБ",
    9: "ЁЯТ╝ рж╕ржХрж╛рж▓ рзпржЯрж╛: ржХрж╛ржЬрзЗ ржоржирзЛржпрзЛржЧ ржжрж┐ржи",
    10: "ЁЯПв рж╕ржХрж╛рж▓ рззрзжржЯрж╛: ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржорж┐ржЯрж┐ржВ ржПрж░ рж╕ржорзЯ",
    11: "тШХ рж╕ржХрж╛рж▓ рззрззржЯрж╛: ржЫрзЛржЯ ржмрж┐рж░рждрж┐ ржирж┐ржи",
    12: "ЁЯХЫ ржжрзБржкрзБрж░ рззрзиржЯрж╛: ржпрзЛрж╣рж░рзЗрж░ ржирж╛ржорж╛ржЬрзЗрж░ ржкрзНрж░рж╕рзНрждрзБрждрж┐",
    13: "ЁЯН╜я╕П ржжрзБржкрзБрж░ рззржЯрж╛: рж▓рж╛ржЮрзНржЪрзЗрж░ ржкрж░ ржмрж┐рж╢рзНрж░рж╛ржо ржирж┐ржи",
    14: "ЁЯХС ржжрзБржкрзБрж░ рзиржЯрж╛: ржХрж╛ржЬрзЗ ржлрж┐рж░рзБржи",
    15: "ЁЯХТ ржмрж┐ржХрж╛рж▓ рзйржЯрж╛: ржЖрж╕рж░рзЗрж░ ржирж╛ржорж╛ржЬрзЗрж░ рж╕ржорзЯ ржЖрж╕ржЫрзЗ",
    16: "ЁЯПл ржмрж┐ржХрж╛рж▓ рзкржЯрж╛: рж╕рзНржХрзБрж▓ ржЫрзБржЯрж┐рж░ рж╕ржорзЯ",
    17: "ЁЯЪЧ ржмрж┐ржХрж╛рж▓ рзлржЯрж╛: ржмрж╛рзЬрж┐ ржлрзЗрж░рж╛рж░ ржкрзНрж░рж╕рзНрждрзБрждрж┐ ржирж┐ржи",
    18: "ЁЯМЖ рж╕ржирзНржзрзНржпрж╛ рзмржЯрж╛: ржорж╛ржЧрж░рж┐ржмрзЗрж░ ржЖржЬрж╛ржи рж╣рж▓рзЛ",
    19: "ЁЯХЦ рж╕ржирзНржзрзНржпрж╛ рзнржЯрж╛: ржЗрж╢рж╛рж░ ржирж╛ржорж╛ржЬрзЗрж░ ржкрзНрж░рж╕рзНрждрзБрждрж┐",
    20: "ЁЯМГ рж░рж╛ржд рзоржЯрж╛: ржкрж░рж┐ржмрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ рж╕ржорзЯ ржХрж╛ржЯрж╛ржи",
    21: "ЁЯУЦ рж░рж╛ржд рзпржЯрж╛: ржХрзБрж░ржЖржи рждрзЗрж▓рж╛ржУрзЯрж╛ржд ржХрж░рзБржи",
    22: "ЁЯЫМ рж░рж╛ржд рззрзжржЯрж╛: ржШрзБржорж╛ржирзЛрж░ ржкрзНрж░рж╕рзНрждрзБрждрж┐ ржирж┐ржи",
    23: "ЁЯМЩ рж░рж╛ржд рззрззржЯрж╛: рж╢рзАржШрзНрж░ржЗ ржШрзБржорж╛ржи"
  };
  return messages[hours] || "ржЖрж▓рзНрж▓рж╛рж╣рж░ рж╕рзНржорж░ржгрзЗ рж╕ржорзЯ ржХрж╛ржЯрж╛ржи";
}

function getRandomQuote() {
  const quotes = [
    "ржирж╛ржорж╛ржЬржЗ ржорзБржорж┐ржирзЗрж░ ржорж┐рж░рж╛ржЬ",
    "рж╕ржорзЯ ржЖрж▓рзНрж▓рж╛рж╣рж░ ржирж┐рзЯрж╛ржоржд, ржЕржкржЪрзЯ ржХрж░рзЛ ржирж╛",
    "ржпрзЗ ржирж╛ржорж╛ржЬрзЗрж░ рж╣рж┐ржлрж╛ржЬржд ржХрж░рзЗ, ржирж╛ржорж╛ржЬ рждрж╛ржХрзЗ рж╕ржм ржЕрж╢рзНрж▓рзАрж▓ ржХрж╛ржЬ ржерзЗржХрзЗ рж╣рж┐ржлрж╛ржЬржд ржХрж░рзЗ",
    "рж╕ржмржЪрзЗрзЯрзЗ ржнрж╛рж▓рзЛ ржЖржорж▓ рж╣рж▓рзЛ рж╕ржорзЯ ржорждрзЛ ржирж╛ржорж╛ржЬ ржкрзЬрж╛",
    "ржХрзБрж░ржЖржи рждрзЗрж▓рж╛ржУрзЯрж╛ржд ржХрж░рзБржи, ржПржЯрж┐ рж╣рзГржжрзЯрзЗрж░ ржкрзНрж░рж╢рж╛ржирзНрждрж┐ ржЖржирзЗ"
  ];
  return quotes[Math.floor(Math.random() * quotes.length)];
}
